//This tool was created by Emily Drobes from Florida State University and Joshua Abbatiello from the University of South Florida.

//slider stuff?
////Imported library that makes the sliders
import controlP5.*;
//Name of the object for the controlP5 library
ControlP5 MC;

//maxPixelHt is the height of the graph
//yConstrain sets limits so the y position of particles stays inside graph
float maxPixelHt=775, yConstrain, frameRt=50;
boolean res, rese;
Button start;
Button reset;

int cx=800, cy=800;





//particle array
particle[] 
particles= { 
  //(density (kg/m^3), diameter (m))
  new particle(500, 1/16000.0), 
  new particle(500, 1/4000.0), 
  new particle(500, .004), 
  new particle(500, .008)
  }
  ;
 
 //clock array 
  clock[]
  clock = {
    new clock(800,800)
  }
  ;




void setup() {

  size(1000, 1000);
  background(203, 203, 203);

  //speeds up movement of particles
  frameRate(frameRt);

  //variables for axes
  //Starting x position of where the y ticks start
  float yTickstart=.120*width;
  //Ending x position of where the y ticks end
  float yTickend=.110*width;
  //Starting y position of where the x ticks start
  float xTickstart=.100*height;
  //Ending y position of where the x ticks end
  float xTickend=.090*height;
  //Amount subtracted or added between ticks
  float tickSpacing=.0775*height;
  //Y position of the text on the x axis. 
  float xTextpos=.085*height;
  //X position of the text on the y axis. 
  float yTextpos=.075*width;


  // The font must be located in the sketch's 
  // "data" directory to load successfully 
  PFont font;
  font = loadFont("ArialMT-12.vlw");
  
  //slider stuff?
  MC=new ControlP5(this); 
  start = MC.addButton("Start/Stop")
    .setPosition(900, 75)
      .setSize(100, 25);
      
      reset = MC.addButton("Reset")
    .setPosition(900, 175)
      .setSize(100, 25);

  res = false;
  


  //sets color of axes and labels to black
  fill(0);
  stroke(0);



  //This alligns the Y axis text to the center and rotates it 
  textAlign(CENTER, BOTTOM);
  pushMatrix();
  translate(.020*width, .480*height);
  rotate(-HALF_PI);
  //textFont(font, 16);
  text("Elevation (masl)", 0, 0);
  popMatrix();



  //title of graph
  text("Laminar Flow", .055*width, .050*height);

  //Bottom x axis line
  rect(.120*width, .875*height, .775*width, .001*height);

  //Top x axis line
  rect(.120*width, xTickstart, .775*width, .001*height);


  //Y axis line (elevation)
  rect(yTickstart, .100*height, .001*width, maxPixelHt);
  //Y axis tick marks (0-40000)
  line(yTickstart, .875*height, yTickend, .875*height);
  line(yTickstart, .875*height-tickSpacing, yTickend, .875*height-tickSpacing);
  line(yTickstart, .7975*height-tickSpacing, yTickend, .7975*height-tickSpacing);
  line(yTickstart, .720*height-tickSpacing, yTickend, .720*height-tickSpacing);
  line(yTickstart, .6425*height-tickSpacing, yTickend, .6425*height-tickSpacing);
  line(yTickstart, .565*height-tickSpacing, yTickend, .565*height-tickSpacing);
  line(yTickstart, .4875*height-tickSpacing, yTickend, .4875*height-tickSpacing);
  line(yTickstart, .410*height-tickSpacing, yTickend, .410*height-tickSpacing);
  line(yTickstart, .3325*height-tickSpacing, yTickend, .3325*height-tickSpacing);
  line(yTickstart, .255*height-tickSpacing, yTickend, .255*height-tickSpacing);
  line(yTickstart, .1775*height-tickSpacing, yTickend, .1775*height-tickSpacing);


  //The right most y axis line
  rect(.895*width, .100*height, .001*width, .775*height);








  //0 mark applied to both axes
  text(0, yTextpos+.020*width, .879*height);


  //Y axis labels
  text(4000, yTextpos, .8015*height);
  text(8000, yTextpos, .724*height);
  text(12000, yTextpos, .6465*height);
  text(16000, yTextpos, .569*height);
  text(20000, yTextpos, .4915*height);
  text(24000, yTextpos, .414*height);
  text(28000, yTextpos, .3365*height);
  text(32000, yTextpos, .259*height);
  text(36000, yTextpos, .1815*height);
  text(40000, yTextpos, .104*height);

  //  //colors the triangle brown
  //  stroke(0);
  //  fill(108, 54, 13);
  //  //draws triangle that represents vent
  //  triangle(.508*width, .876*height, .408*width, height, .608*width, height);
  
  //text for number of loops
  text("Loops", yTextpos, .910*height);
  //text for diameter
  text("Diameter", yTextpos, .950*height);
  text("4 phi", .192*width, .950*height);
  text("2 phi", .386*width, .950*height);
  text("-2 phi", .594*width, .950*height);
  text("-3 phi", .793*width, .950*height);
  //text for velocity
  text("Velocity", yTextpos, .990*height);
  text("0.058 m/s",.192*width, .990*height);
  text("0.928 m/s", .386*width, .990*height);
  text("237.684 m/s", .594*width, .990*height);
  text("950.735 m/s", .793*width, .990*height);
  
 
  
}




void draw () {
  //draws the white rectangle around graph
  stroke(0);
  fill(255);
  rect(.120*width, .100*height, .775*width, .775*height);

//PFont font;
//  font = loadFont("ArialMT-12.vlw");

  
  noStroke();
  fill(203, 203, 203);
  //top rect
  rect(.120*width, .000*height, .775*width, .100*height);
 




  for (int i=0; i<particles.length; i++) {
    if (res) {
      particles[i].update();
    }
   
    stroke(0);
    fill(200/(i+.1),20,20);
    ellipse(.775*width*(i+1.0)/4.0+.023*width, 775-((25*(i+1))/2)+particles[i].scale(), 25*(i+1), 25*(i+1));
     stroke(0);
      fill(0);
    smooth();
//     textFont(font, 16);
     text(particles[i].counter0,.775*width*(i+1.0)/4.0+.023*width, .910*height);
  }
  
  for (int i=0; i<particles.length; i++) {
    if (res) {
      clock[i].update();
    }
    
     // Draw the clock background
  fill(80);
  noStroke();
  ellipse(cx, cy, clockDiameter, clockDiameter);
  

  
  // Angles for sin() and cos() start at 3 o'clock;
  // subtract HALF_PI to make them start at the top
  float s = map(sec, 0, 60, 0, TWO_PI) - HALF_PI;
    //second=(sec+1)*frameRt;
  //println(sec);
  float m = map( sec/60/*+ norm(sec++, 0, 60)*/, 0, 60, 0, TWO_PI) - HALF_PI; 
  println(m);
  //min=frameRt*(minute+1/60);
  float h = map(sec/3600 /*+ norm(min++, 0, 60)*/, 0, 24, 0, TWO_PI * 2) - HALF_PI;
  //hr=frameRt*(hr+1/3600);
  
  // Draw the hands of the clock
  stroke(255);
  strokeWeight(1);
  line(cx, cy, cx + cos(s) * secondsRadius, cy + sin(s) * secondsRadius);
  strokeWeight(2);
  line(cx, cy, cx + cos(m) * minutesRadius, cy + sin(m) * minutesRadius);
  strokeWeight(4);
  line(cx, cy, cx + cos(h) * hoursRadius, cy + sin(h) * hoursRadius);
  
  // Draw the minute ticks
  strokeWeight(2);
  beginShape(POINTS);
  for (int a = 0; a < 360; a+=6) {
    float angle = radians(a);
    float x = cx + cos(angle) * secondsRadius;
    float y = cy + sin(angle) * secondsRadius;
    vertex(x, y);
  }
  endShape();

    
   
    
    
   
//  if (res) {
//    clock();
////    sec+=1;
////  } else {
////    sec=0;
//  }
  
  
  
  
  
}
}

//particle class
class particle {
  float dens, diam, v, y, g, M, vel, l, loop;
  int counter0;

  //constructor
  particle(float dens, float diam) {
    //starting y value
    y=40000;
   loop+=1.0;
   this.counter0=0;
   
   
    //gravity (m/s^2)
    g=9.8;
    //air viscosity (Pa*s)
    M=.000018325;
    vel=(((dens*g*(diam*diam))/(18.0*M)));
    //tells variables to equal themselves
    this.dens=dens;
    this.diam=diam;
    //velocity = laminar flow equation
    this.v=vel/*13*(pow(vel, .3))*/;
   

    //prints values
  }
   
    
    
    
  

 
  void update() {
    y-=v;
   //loop+=1.0/60.0;
    if (y<=0) {
      this.counter0++;
     
      y=40000;
       //bottom rect
        noStroke();
  fill(203, 203, 203);
  rect(.120*width, .876*height, .775*width, .050*height);
     
  
    
    }
    

    
  } 

  
 

  //scales y to graph
  int scale() {
    
    return parseInt(-1*y/40000.0*.775*height+.100*height);
    
  }

  float log10 (float x) {

    return abs(log(x)/log(10));
  }
  }
  
  class clock {
    float sec;
    float secondsRadius;
float minutesRadius;
float hoursRadius;
float clockDiameter; 

  int radius = min(width, height) / 20, cx, cy;
 float secondsRadius = radius * 0.72, minutesRadius = radius * 0.60, hoursRadius = radius * 0.50, clockDiameter = radius * 1.8;
    
    clock(int cx,int cy ) {
    
    

  
  this.cx =cx;
  this.cy =cy;
  
    }



 void update() {
  sec+=1; 
 }
     
  }


void controlEvent(ControlEvent theEvent) {
  
 
  if (theEvent.isController()) {

    if (theEvent.controller() == start) {
      res = !res;
     
    }
    
    if (theEvent.controller() == reset) {
     res = false;
     for (int i=0; i<particles.length; i++) {
       particles[i].y=40000;
       particles[i].counter0=0;
     }
     
    }
  }
}
