//final int minX=-0, maxX=100, minY=-100, maxY=100;
float inclination;
int halfWidth=20, depth=50;

Point[] points;

void setup() {
  size(1000, 1000); 
  background(128);
  stroke(0);
  strokeWeight(4);
    //x axis
    line(10, .75*height, width-10, .75*height);
    //y axis
    line(75, 10, 75, height-10);
    //labels
    text("nT", 20, 350);
    text("Depth", 20, 850);
  points = new Point[100];
  for (int i=0; i<points.length; i++) {
    points[i] = new Point(i*10, 0);
  }
}

void draw() {
  fill(128);
 rect(75,0,width,.75*height);
  arrow(width/2, height/2, 50, inclination);

  for (int i=0; i<points.length; i++) {
    points[i].update();
    points[i].display();
  }
}

void arrow(float x, float y, int len, float angle) {
  pushMatrix();
  translate(x, y);
  rotate(angle);
  line(0, 0, len, 0);
  line(len, 0, len - 6, -6);
  line(len, 0, len - 6, 6);
  popMatrix();
}

void mouseDragged() {
  inclination=constrain(atan((mouseY-height/2.0)/(mouseX-width/2.0)), -QUARTER_PI, QUARTER_PI);
}

class Point {
  int x, y, declination;
  float theta, jx, jz, a, b, T, J_intensity=400;
  Point(int x, int y) {
    this.x=x;
    this.y=y;
    this.declination=0;
  }
  void update() {
    /* ia is the component of the inclination of the 
     vector of magnetization in the direction of x */

    /* theta is the angle between the dipping 
     dike and the inclination of the vector of 
     magnetization projected in the x direction */
    theta = -HALF_PI - atan2(tan(inclination), sin(declination)); 

    /* compute the components of magnetization wrt theta */
    jx = J_intensity*sin(theta);
    jz = J_intensity*cos(theta);

    //x = ( i - 1000) * 10;
    a = -2.0*halfWidth*(jx*sin(inclination) + jz*cos(inclination)*sin(declination));
    b = 2.0*halfWidth*(-jx*cos(inclination)*sin(declination) + jz*sin(inclination));
    T = (float)(a*x + b*depth)/(x*x + depth*depth);
    println(jx, jz);
    y = constrain(parseInt(.375*height-T*140/14.), 0, 746);
  }
  void display() {
    stroke(0);
    strokeWeight(2);
    fill(255);
    ellipse(constrain(x,79,width), y, 10, 10);
  }
}
//void drawAxes() {
//  stroke(0);
//  strokeWeight(4);
//  //x axis
//  line(10, abs((float)maxX)/(abs(maxX)+abs(minX))*(height-20), width-10, abs((float)maxX)/(abs(maxX)+abs(minX))*(height-20));
//}
