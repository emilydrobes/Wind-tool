import controlP5.*;

//This tool was created by Emily Drobes from Florida State University and Joshua Abbatiello from the University of South Florida.

//slider stuff?
////Imported library that makes the sliders
import controlP5.*;
//Name of the object for the controlP5 library
ControlP5 MC;

//maxPixelHt is the height of the graph
//yConstrain sets limits so the y position of particles stays inside graph
float maxPixelHt=775, yConstrain;
boolean res;
Button reset;

//particle array
particle[] 
particles= { 
  //(density (kg/m^3), diameter (m))
  new particle(500, 1/16000.0), 
  new particle(500, 1/4000.0), 
  new particle(500, .004), 
  new particle(500, .008)
  }
  ;




void setup() {

  size(1000, 1000);
  background(203, 203, 203);

  //speeds up movement of particles
  frameRate(60);

  //variables for axes
  //Starting x position of where the y ticks start
  float yTickstart=.120*width;
  //Ending x position of where the y ticks end
  float yTickend=.110*width;
  //Starting y position of where the x ticks start
  float xTickstart=.100*height;
  //Ending y position of where the x ticks end
  float xTickend=.090*height;
  //Amount subtracted or added between ticks
  float tickSpacing=.0775*height;
  //Y position of the text on the x axis. 
  float xTextpos=.085*height;
  //X position of the text on the y axis. 
  float yTextpos=.075*width;


  // The font must be located in the sketch's 
  // "data" directory to load successfully 
  PFont font;
  font = loadFont("ArialMT-12.vlw");
  //
  //slider stuff?
  MC=new ControlP5(this); 
  reset = MC.addButton("Reset")
    .setPosition(900, 75)
      .setSize(100, 25);

  res = false;
  //  //Adds the sliders for the variables
  //  //(name of slider, min, max, starting value, x, y, width, height)
  //  a = MC.addSlider("alphaSlider", 0, 10, 0, round(.670*width), round(.020*height), round(.100*width), round(.015*height));
  //  //changes font of slider label
  //  MC.getController("alphaSlider")
  //    .getCaptionLabel()
  //      .setFont(font)
  //        .setSize(15)
  //          ;
  //
  //  b= MC.addSlider("betaSlider", 0, 10, 0, round(.670*width), round(.050*height), round(.100*width), round(.015*height));
  //  MC.getController("betaSlider")
  //    .getCaptionLabel()
  //      .setFont(font)
  //        .setSize(15)
  //          ;


  //sets color of axes and labels to black
  fill(0);
  stroke(0);



  //This alligns the Y axis text to the center and rotates it 
  textAlign(CENTER, BOTTOM);
  pushMatrix();
  translate(.020*width, .480*height);
  rotate(-HALF_PI);
  text("Elevation (masl)", 0, 0);
  popMatrix();



  //title of graph
  textFont(font, 12);
  text("Laminar Flow", .502*width, .020*height);

  //Bottom x axis line
  rect(.120*width, .875*height, .775*width, .001*height);

  //Top x axis line
  rect(.120*width, xTickstart, .775*width, .001*height);


  //Y axis line (elevation)
  rect(yTickstart, .100*height, .001*width, maxPixelHt);
  //Y axis tick marks (0-50000)
  line(yTickstart, .875*height, yTickend, .875*height);
  line(yTickstart, .875*height-tickSpacing, yTickend, .875*height-tickSpacing);
  line(yTickstart, .7975*height-tickSpacing, yTickend, .7975*height-tickSpacing);
  line(yTickstart, .720*height-tickSpacing, yTickend, .720*height-tickSpacing);
  line(yTickstart, .6425*height-tickSpacing, yTickend, .6425*height-tickSpacing);
  line(yTickstart, .565*height-tickSpacing, yTickend, .565*height-tickSpacing);
  line(yTickstart, .4875*height-tickSpacing, yTickend, .4875*height-tickSpacing);
  line(yTickstart, .410*height-tickSpacing, yTickend, .410*height-tickSpacing);
  line(yTickstart, .3325*height-tickSpacing, yTickend, .3325*height-tickSpacing);
  line(yTickstart, .255*height-tickSpacing, yTickend, .255*height-tickSpacing);
  line(yTickstart, .1775*height-tickSpacing, yTickend, .1775*height-tickSpacing);


  //The right most y axis line
  rect(.895*width, .100*height, .001*width, .775*height);








  //0 mark applied to both axes
  text(0, yTextpos+.020*width, .879*height);


  //Y axis labels
  text(4000, yTextpos, .8015*height);
  text(8000, yTextpos, .724*height);
  text(12000, yTextpos, .6465*height);
  text(16000, yTextpos, .569*height);
  text(20000, yTextpos, .4915*height);
  text(24000, yTextpos, .414*height);
  text(28000, yTextpos, .3365*height);
  text(32000, yTextpos, .259*height);
  text(36000, yTextpos, .1815*height);
  text(40000, yTextpos, .104*height);

  //  //colors the triangle brown
  //  stroke(0);
  //  fill(108, 54, 13);
  //  //draws triangle that represents vent
  //  triangle(.508*width, .876*height, .408*width, height, .608*width, height);
}




void draw () {
  //draws the white rectangle around graph
  stroke(0);
  fill(255);
  rect(.120*width, .100*height, .775*width, .775*height);


  //if (mouseButton == LEFT) {
  //
  //}
  //void mouseClicked() {
  //draws an ellipse for each particle

  //}
  noStroke();
  fill(203, 203, 203);
  rect(.120*width, .030*height, .775*width, .070*height);
  rect(.120*width, .876*height, .775*width, .070*height);




  for (int i=0; i<particles.length; i++) {
    if (res) {
      particles[i].update();
    }
    stroke(0);
    fill(255/(i+1.0));
    ellipse(.775*width*(i+1.0)/4.0+.023*width, 775+particles[i].scale(), 30*(i+1), 30*(i+1));
  }
}

//particle class
class particle {
  float dens, diam, v, y, g, M, vel;

  //constructor
  particle(float dens, float diam) {
    //starting y value
    y=40000;
    //constrains y to stay in graph
    //yConstrain = constrain(y, 0.0, 40000.0);
    //gravity (m/s^2)
    g=9.8;
    //air viscosity (Pa*s)
    M=.000018325;
    vel=(((dens*g*(diam*diam))/(18.0*M)));
    //tells variables to equal themselves
    this.dens=dens;
    this.diam=diam;
    //velocity = laminar flow equation
    this.v=13*(pow(vel, .3));
    println(this.diam, this.dens, this.v, vel);


    //prints values
    //    println(dens);
    //    println(diam);
    //    println(v);
    //     println(y);
    //     println(yConstrain);
    //      println(g);
    //       println(M);
    println();
  }

  //void mouseClicked () {
  //  
  //   for (int i=0; i<particles.length; i++) {
  //  particles[i].clickedEvent();
  //  fill(255/(i+1.0));
  //  ellipse(.775*width*(i+1.0)/4.0+.023*width,775+particles[i].scale(),10*(i+1),10*(i+1));
  //
  //} 
  //updates y
  //   update() {
  //sets limit so y stays on graph
  //   if (y>0) {

  //    loop();
  // }

  //  }


  //void clickedEvent() {
  //   y-=v;
  //}

  void update() {
    y-=v;
    if (y<=0) {
      y=40000;
    }
  }

  //scales y to graph
  int scale() {
    //    for (int i=0; i<particles.length; i++) {
    //    if (particles[i].clickedEvent == true) {
    return parseInt(-1*y/40000.0*.775*height+.100*height);
    //    }
    //  }
    //}
  }

  float log10 (float x) {

    return abs(log(x)/log(10));
  }
}

void controlEvent(ControlEvent theEvent) {
  if (theEvent.isController()) {

    if (theEvent.controller() == reset) {
      res = !res;
      println(res);
    }
  }
}
